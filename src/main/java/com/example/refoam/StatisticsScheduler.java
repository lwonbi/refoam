package com.example.refoam;

import com.example.refoam.service.DiscordNotifier;
import com.example.refoam.domain.*;
import com.example.refoam.domain.Process;
import com.example.refoam.repository.ErrorStatisticsRepository;
import com.example.refoam.repository.OrderRepository;
import com.example.refoam.repository.ProcessRepository;
import com.example.refoam.service.OrderMonitorService;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class StatisticsScheduler {
    private final OrderRepository orderRepository;
    private final ErrorStatisticsRepository errorStatisticsRepository;
    private final ProcessRepository processRepository;
    private final OrderMonitorService orderMonitorService;
    private final DiscordNotifier discordNotifier;

    @Scheduled(fixedRate = 300000)//interval 5 minutes
    public void statistics(){
        log.info("statistics Ïä§ÏºÄÏ§ÑÎü¨ Ìò∏Ï∂úÎê® : {}", LocalDateTime.now());
        List<Orders> ordersList = orderRepository.findAllByOrderStateAndStatisticsIntervalCheck("Í≥µÏ†ïÏôÑÎ£å",false);
        for(Orders orders : ordersList){
            LocalDateTime interval = LocalDateTime.now().minusMinutes(5);//interval 5 minutes
            List<Process> processList = processRepository.findByOrderAndProcessDateInterval(orders, interval);
            if(processList.isEmpty()) continue;

            int errorCount = 0;
            for(Process process : processList){
                if(process.getStandard().getProductLabel()!=ProductLabel.OK){
                    errorCount +=1;
                }
            }
            if(errorCount >0){
                ErrorStatistics errorStatistics = ErrorStatistics.builder()
                        .order(orders)
                        .errorDate(LocalDateTime.now())
                        .errorCount(errorCount)
                        .build();
                errorStatisticsRepository.save(errorStatistics);
            }
            orders.setStatisticsIntervalCheck(true);
            orderRepository.save(orders);
        }

    }
    @Scheduled(initialDelay = 0, fixedRate = 30000)
    public void errCountMonitor() {
        log.info("‚è∞ errCountMonitor Ïä§ÏºÄÏ§ÑÎü¨ Ìò∏Ï∂úÎê® : {}", LocalDateTime.now());
        List<Orders> ordersList = orderRepository.findAllByOrderStateAndStatisticsIntervalCheckAndSmtpCheck("Í≥µÏ†ïÏôÑÎ£å", true, false);

        for (Orders orders : ordersList) {
            int orderQty = orders.getOrderQuantity();
            String productName = String.valueOf(orders.getProductName());
            String email = orders.getEmployee().getEmail();

            Integer errCount = errorStatisticsRepository.findMaxErrorCountGroupedByOrderId(orders);
            if (errCount == null || errCount == 0) continue;

            double errorRate = (double) errCount / orderQty;

            // ÏóêÎü¨Ïú®Ïù¥ 30% Ïù¥ÌïòÏù∏ Í≤ΩÏö∞ Ïä§ÌÇµ
            if (errorRate <= 0.3) {
                log.info("‚ö†Ô∏è Ï£ºÎ¨∏ {} errorRate {} <= 0.3, Ï†ÑÏÜ° Ï†úÏô∏", orders.getId(), errorRate);
                continue;
            }

            // ÎîîÏä§ÏΩîÎìú ÏïåÎ¶º Ï†ÑÏÜ° Ï°∞Í±¥: ÏïÑÏßÅ ÏïåÎ¶ºÏùÑ Î≥¥ÎÇ∏ Ï†Å ÏóÜÎäî Ï£ºÎ¨∏
            if (!orders.isDiscordCheck()) {
                String message = String.format(
                        "üö® [Ï£ºÎ¨∏ %d] %s Ï†úÌíà Í≥µÏ†ï Ï§ë ÏóêÎü¨Ïú® %.2f%% (ÏóêÎü¨ %dÍ±¥ / Ï¥ù %dÍ±¥)",
                        orders.getId(), productName, errorRate * 100, errCount, orderQty
                );
                log.info("üì® ÎîîÏä§ÏΩîÎìú ÏïåÎ¶º Ï†ÑÏÜ° ÏãúÎèÑ: Ï£ºÎ¨∏ {}", orders.getId());
                discordNotifier.sendAlert(message);
                // Ïû¨Ï†ÑÏÜ° Î∞©ÏßÄÎ•º ÏúÑÌïú ÌîåÎûòÍ∑∏ Ï†ÄÏû•
                orders.setDiscordCheck(true);
            }

            orderRepository.save(orders);

            // Ïù¥Î©îÏùº Ï†ÑÏÜ° Ï°∞Í±¥: Î©îÏùº Ï≤¥ÌÅ¨ 'ÏÇ¨Ïö©'Î°ú ÎêòÏñ¥ ÏûàÏùÑ Í≤ΩÏö∞
            if (orders.getEmployee().isSendMail()) {
                orderMonitorService.errorCheck(email, orderQty, errCount);
                log.info("üìß email Ï†ÑÏÜ°: {}, Ï£ºÎ¨∏ {}, ÏóêÎü¨ {}", email, orderQty, errCount);
                orders.setSmtpCheck(true);
            }

            orderRepository.save(orders);
        }
    }
}
